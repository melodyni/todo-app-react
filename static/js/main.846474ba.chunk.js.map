{"version":3,"sources":["todoComponents/InputBox.js","todoComponents/Task.js","todoComponents/TaskList.js","todoComponents/Title.js","todoComponents/status.js","todoComponents/Todo.js","App.js","serviceWorker.js","index.js"],"names":["InputBox","props","state","text","handleChange","bind","handleSubmit","event","this","setState","target","value","preventDefault","length","onEnter","onSubmit","onChange","autoFocus","React","Component","defaultProps","Task","task","id","updateTaskStatus","onClick","className","status","message","TaskList","tasks","map","index","key","Title","isEditable","handleClick","updateTitle","title","Todo","addTask","newTask","currentStatus","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.846474ba.chunk.js","sourcesContent":["import React from 'react';\n\nclass InputBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { text: props.text };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ text: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    if (this.state.text.length > 0) {\n      this.props.onEnter(this.state.text);\n      this.setState({ text: '' });\n    }\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          onChange={this.handleChange}\n          value={this.state.text}\n          autoFocus\n        ></input>\n      </form>\n    );\n  }\n}\n\nInputBox.defaultProps = {\n  text: '',\n};\n\nexport default InputBox;\n","import React from 'react';\nimport '../todo.css';\n\nconst Task = ({ task, id, updateTaskStatus }) => {\n  return (\n    <div onClick={() => updateTaskStatus(id)} className={`flex ${task.status}`}>\n      <div className='checkBox'></div>\n      <div className='text'>{task.message}</div>\n    </div>\n  );\n};\n\nexport default Task;\n","import React from 'react';\nimport Task from './Task';\n\nconst TaskList = ({ tasks, updateTaskStatus }) => {\n  return tasks.map((task, index) => (\n    <Task\n      task={task}\n      key={index}\n      id={index}\n      updateTaskStatus={updateTaskStatus}\n    />\n  ));\n};\n\nexport default TaskList;\n","import React from 'react';\nimport InputBox from './InputBox';\n\nclass Title extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isEditable: false };\n    this.handleClick = this.handleClick.bind(this);\n    this.updateTitle = this.updateTitle.bind(this);\n  }\n\n  handleClick() {\n    this.setState({ isEditable: true });\n  }\n\n  updateTitle(title) {\n    this.props.updateTitle(title);\n    this.setState({ isEditable: false });\n  }\n\n  render() {\n    if (this.state.isEditable) {  \n      return <InputBox text={this.props.title} onEnter={this.updateTitle} />;\n    }\n    return <h2 onClick={this.handleClick}>{this.props.title}</h2>;\n  }\n}\n\nexport default Title;\n","const TODO = 'todo';\nconst DOING = 'doing';\nconst DONE = 'done';\n\nconst status = {\n  [TODO]: DOING,\n  [DOING]: DONE,\n  [DONE]: TODO,\n};\n\nconst getNextStatus = (currentStatus) => status[currentStatus];\nconst getDefaultStatus = () => TODO;\n\nexport { getDefaultStatus, getNextStatus };\n","import React from 'react';\nimport InputBox from './InputBox';\nimport TaskList from './TaskList';\nimport Title from './Title';\nimport { getDefaultStatus, getNextStatus } from './status';\n\nclass Todo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { title: 'todo', tasks: [] };\n    this.addTask = this.addTask.bind(this);\n    this.updateTaskStatus = this.updateTaskStatus.bind(this);\n    this.updateTitle = this.updateTitle.bind(this);\n  }\n\n  addTask(task) {\n    const newTask = { message: task, status: getDefaultStatus() };\n    this.setState((state) => ({\n      tasks: [...state.tasks, newTask],\n    }));\n  }\n\n  updateTaskStatus(id) {\n    const tasks = [...this.state.tasks];\n    tasks[id].status = getNextStatus(tasks[id].status);\n    this.setState({ tasks });\n  }\n\n  updateTitle(title) {\n    this.setState({ title });\n  }\n\n  render() {\n    return (\n      <div>\n        <Title title={this.state.title} updateTitle={this.updateTitle} />\n        <TaskList\n          tasks={this.state.tasks}\n          updateTaskStatus={this.updateTaskStatus}\n        />\n        <InputBox onEnter={this.addTask} />\n      </div>\n    );\n  }\n}\n\nexport default Todo;\n","import React from 'react';\nimport Todo from './todoComponents/Todo';\nimport './todo.css';\n\nfunction App() {\n  return (\n    <div className='container'>\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}